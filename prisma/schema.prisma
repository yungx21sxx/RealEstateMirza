// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                    Int                     @id @default(autoincrement())
  // Все роли: 'ADMIN' 'USER'
  role                  String                  @default("USER")
  email                 String                  @unique
  emailVerified         Boolean                 @default(false)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  EmailVerificationCode EmailVerificationCode[]
  reviews               Review[]
}

model EmailVerificationCode {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  code        String
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  used        Boolean  @default(false)
  attempts    Int      @default(0) // Количество попыток ввода кода
  lastAttempt DateTime @default(now()) // Время последней попытки
}

model Review {
  id              Int       @id @default(autoincrement())
  text            String
  rating          Int
  userName        String?
  isAdminCreated  Boolean   @default(false)
  createdAt       DateTime  @default(now())
  listingCheckIn  DateTime?
  listingCheckOut DateTime?
  userId          Int?
  listingId       Int
  listing         Listing   @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user            User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Listing {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  minPrice    Int

  photos       Photo[]
  pricePeriods PricePeriod[]

  createdAt DateTime @default(now())

  //*****Адрес
  address   String
  longitude Float
  latitude  Float
  //*********

  //*****Параметры квартиры
  roomCount          Int
  bedDescription     String
  area               Int
  floor              Int
  maxFloor           Int
  balcony            String
  viewDescription    String
  parkingDescription String

  appliances    Appliances[]
  internetAndTV InternetAndTV[]
  amenities     Amenity[]
  monthlyRental Boolean         @default(false)
  withAnimals   Boolean         @default(false)
  places        Int

  reviews Review[]
}

model Appliances {
  id        Int      @id @default(autoincrement())
  label     String
  listing   Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId Int
}

model InternetAndTV {
  id        Int      @id @default(autoincrement())
  label     String
  listing   Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId Int
}

model Amenity {
  id        Int      @id @default(autoincrement())
  label     String
  listing   Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId Int
}

model Photo {
  id        Int      @id @default(autoincrement())
  urlMin    String
  urlFull   String
  rotation  Int      @default(0)
  position  Int      @default(0)
  listing   Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId Int?
}

model PricePeriod {
  id        Int      @id @default(autoincrement())
  price     Int
  startDate DateTime
  endDate   DateTime
  listingId Int?
  listing   Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
}
